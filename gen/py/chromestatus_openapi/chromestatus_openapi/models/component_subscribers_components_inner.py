# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from chromestatus_openapi.models.base_model_ import Model
from chromestatus_openapi.models.component_subscribers_possible_subscribers_inner import ComponentSubscribersPossibleSubscribersInner
from chromestatus_openapi import util

from chromestatus_openapi.models.component_subscribers_possible_subscribers_inner import ComponentSubscribersPossibleSubscribersInner  # noqa: E501

class ComponentSubscribersComponentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, computed_subscribers=None, owners=None):  # noqa: E501
        """ComponentSubscribersComponentsInner - a model defined in OpenAPI

        :param name: The name of this ComponentSubscribersComponentsInner.  # noqa: E501
        :type name: str
        :param computed_subscribers: The computed_subscribers of this ComponentSubscribersComponentsInner.  # noqa: E501
        :type computed_subscribers: List[ComponentSubscribersPossibleSubscribersInner]
        :param owners: The owners of this ComponentSubscribersComponentsInner.  # noqa: E501
        :type owners: List[ComponentSubscribersPossibleSubscribersInner]
        """
        self.openapi_types = {
            'name': str,
            'computed_subscribers': List[ComponentSubscribersPossibleSubscribersInner],
            'owners': List[ComponentSubscribersPossibleSubscribersInner]
        }

        self.attribute_map = {
            'name': 'name',
            'computed_subscribers': 'computed_subscribers',
            'owners': 'owners'
        }

        self._name = name
        self._computed_subscribers = computed_subscribers
        self._owners = owners

    @classmethod
    def from_dict(cls, dikt) -> 'ComponentSubscribersComponentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComponentSubscribers_components_inner of this ComponentSubscribersComponentsInner.  # noqa: E501
        :rtype: ComponentSubscribersComponentsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ComponentSubscribersComponentsInner.


        :return: The name of this ComponentSubscribersComponentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComponentSubscribersComponentsInner.


        :param name: The name of this ComponentSubscribersComponentsInner.
        :type name: str
        """

        self._name = name

    @property
    def computed_subscribers(self):
        """Gets the computed_subscribers of this ComponentSubscribersComponentsInner.


        :return: The computed_subscribers of this ComponentSubscribersComponentsInner.
        :rtype: List[ComponentSubscribersPossibleSubscribersInner]
        """
        return self._computed_subscribers

    @computed_subscribers.setter
    def computed_subscribers(self, computed_subscribers):
        """Sets the computed_subscribers of this ComponentSubscribersComponentsInner.


        :param computed_subscribers: The computed_subscribers of this ComponentSubscribersComponentsInner.
        :type computed_subscribers: List[ComponentSubscribersPossibleSubscribersInner]
        """

        self._computed_subscribers = computed_subscribers

    @property
    def owners(self):
        """Gets the owners of this ComponentSubscribersComponentsInner.


        :return: The owners of this ComponentSubscribersComponentsInner.
        :rtype: List[ComponentSubscribersPossibleSubscribersInner]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ComponentSubscribersComponentsInner.


        :param owners: The owners of this ComponentSubscribersComponentsInner.
        :type owners: List[ComponentSubscribersPossibleSubscribersInner]
        """

        self._owners = owners
